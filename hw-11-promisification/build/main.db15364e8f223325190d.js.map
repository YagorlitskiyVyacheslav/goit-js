{"version":3,"sources":["webpack:///./index.js"],"names":["delay","ms","Promise","resolve","reject","setTimeout","loggerTask1","time","console","log","then","users","name","active","toggleUserState","allUsers","userName","updatedUsers","map","user","loggerTask2","table","makeTransaction","transaction","min","max","Math","floor","random","id","logSuccess","logError","warn","amount","catch"],"mappings":"yLAGMA,EAAQ,SAAAC,GACV,OAAO,IAAIC,SAAQ,SAACC,EAASC,GACzBC,YAAW,WACPF,EAAQF,KACTA,OAILK,EAAc,SAAAC,GAAI,OAAIC,QAAQC,IAAR,kBAA8BF,EAA9B,OAG5BP,EAAM,KAAMU,KAAKJ,GACjBN,EAAM,KAAMU,KAAKJ,GACjBN,EAAM,MAAMU,KAAKJ,GAIjB,IAAMK,EAAQ,CACV,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAGrBC,EAAkB,SAACC,EAAUC,GAC/B,IAAMC,EAAeF,EAASG,KAAI,SAAAC,GAAI,OAClCA,EAAKP,OAASI,EAAd,iBAA8BG,EAA9B,CAAoCN,QAASM,EAAKN,SAAWM,KAEjE,OAAO,IAAIjB,SAAQ,SAAAC,GAAO,OAAIA,EAAQc,OAGpCG,EAAc,SAAAH,GAAY,OAAIT,QAAQa,MAAMJ,IAWlDH,EAAgBH,EAAO,SAASD,KAAKU,GACrCN,EAAgBH,EAAO,OAAOD,KAAKU,GAInC,IAIME,EAAkB,SAACC,GACvB,IALiCC,EAAKC,EAKhCzB,GAL2BwB,EAKO,IALFC,EAKO,IAJtCC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,IAKpD,OAAO,IAAItB,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACUqB,KAAKE,SAAW,GAEjCzB,EAAQ,CAAE0B,GAAIN,EAAYM,GAAItB,KAAMP,IAEtCI,EAAOmB,EAAYM,MAElB7B,OAID8B,EAAa,SAAC,GAAiB,IAAfD,EAAe,EAAfA,GAAItB,EAAW,EAAXA,KACxBC,QAAQC,IAAR,eAA2BoB,EAA3B,iBAA8CtB,EAA9C,OAGIwB,EAAW,SAAAF,GACfrB,QAAQwB,KAAR,gCAA6CH,EAA7C,8BAyBFP,EAAgB,CACZO,GAAI,GACJI,OAAQ,MAETvB,KAAKoB,GACLI,MAAMH,GAETT,EAAgB,CACZO,GAAI,GACJI,OAAQ,MAETvB,KAAKoB,GACLI,MAAMH,GAETT,EAAgB,CACZO,GAAI,GACJI,OAAQ,KAETvB,KAAKoB,GACLI,MAAMH,GAETT,EAAgB,CACZO,GAAI,GACJI,OAAQ,MAETvB,KAAKoB,GACLI,MAAMH,K","file":"main.db15364e8f223325190d.js","sourcesContent":["import './styles.css';\r\n\r\n//TODO TASK 1\r\nconst delay = ms => {\r\n    return new Promise((resolve, reject) => {\r\n        setTimeout(() => {\r\n            resolve(ms);\r\n        }, ms) \r\n    })\r\n};\r\n\r\nconst loggerTask1 = time => console.log(`Resolved after ${time}ms`);\r\n\r\n// Вызовы функции для проверки\r\ndelay(2000).then(loggerTask1); // Resolved after 2000ms\r\ndelay(1000).then(loggerTask1); // Resolved after 1000ms\r\ndelay(1500).then(loggerTask1); // Resolved after 1500ms\r\n\r\n//TODO TASK 2\r\n\r\nconst users = [\r\n    { name: 'Mango', active: true },\r\n    { name: 'Poly', active: false },\r\n    { name: 'Ajax', active: true },\r\n    { name: 'Lux', active: false },\r\n];\r\n\r\nconst toggleUserState = (allUsers, userName) => {\r\n    const updatedUsers = allUsers.map(user => \r\n        user.name === userName ? { ...user, active: !user.active } : user);\r\n\r\n    return new Promise(resolve => resolve(updatedUsers))\r\n};\r\n\r\nconst loggerTask2 = updatedUsers => console.table(updatedUsers);\r\n\r\n/*\r\n * Сейчас работает так\r\n */\r\n// toggleUserState(users, 'Mango', loggerTask2);\r\n// toggleUserState(users, 'Lux', loggerTask2);\r\n\r\n/*\r\n * Должно работать так\r\n */\r\ntoggleUserState(users, 'Mango').then(loggerTask2);\r\ntoggleUserState(users, 'Lux').then(loggerTask2);\r\n\r\n//TODO TASK 3\r\n\r\nconst randomIntegerFromInterval = (min, max) => {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n};\r\n\r\nconst makeTransaction = (transaction) => {\r\n  const delay = randomIntegerFromInterval(200, 500);\r\n  return new Promise((resolve, reject) => {\r\n    setTimeout(() => {\r\n      const canProcess = Math.random() > 0.3;\r\n      if (canProcess) {\r\n        resolve({ id: transaction.id, time: delay });\r\n    } else {\r\n      reject(transaction.id);\r\n    }\r\n    }, delay);\r\n  })\r\n};\r\n\r\nconst logSuccess = ({ id, time }) => {\r\n  console.log(`Transaction ${id} processed in ${time}ms`);\r\n};\r\n\r\nconst logError = id => {\r\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\r\n};\r\n\r\n/*\r\n * Работает так\r\n */\r\n// makeTransaction({\r\n//   id: 70,\r\n//   amount: 150\r\n// }, logSuccess, logError);\r\n// makeTransaction({\r\n//   id: 71,\r\n//   amount: 230\r\n// }, logSuccess, logError);\r\n// makeTransaction({\r\n//   id: 72,\r\n//   amount: 75\r\n// }, logSuccess, logError);\r\n// makeTransaction({\r\n//   id: 73,\r\n//   amount: 100\r\n// }, logSuccess, logError);\r\n/*\r\n * Должно работать так\r\n */\r\nmakeTransaction({\r\n    id: 70,\r\n    amount: 150\r\n  })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\nmakeTransaction({\r\n    id: 71,\r\n    amount: 230\r\n  })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\nmakeTransaction({\r\n    id: 72,\r\n    amount: 75\r\n  })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\nmakeTransaction({\r\n    id: 73,\r\n    amount: 100\r\n  })\r\n  .then(logSuccess)\r\n  .catch(logError);"],"sourceRoot":""}